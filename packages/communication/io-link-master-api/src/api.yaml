swagger: "2.0"
info:
  description: "This is an OpenAPI declaration of the available API's on [IFM](https://ifm.com) IO-Link Masters. Produced for [The Tech Company](https://github.com/TheTechCompany). For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "IFM IO-Link"
host: "192.168.10.174"
basePath: "/"
tags:
- name: "IOT"
  description: "Accessible on IOT port"
- name: "FieldBus"
  description: "Accessible on IOT and Fieldbus"
- name: "Ports"
  description: "Actions relating to individual ports"
- name: "Diagnostics"
  description: "Diagnostic info about the master"
- name: "DeviceInfo"
  description: "Device info about the master"
schemes:
- "https"
- "http"
paths:
  /gettree:
    get: 
      tags:
        - "DeviceInfo"
      operationId: "getTree"
      summary: "Get tree of commands available"
      produces: 
      - "application/json"

      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TreeResponse"

  /deviceinfo/serialnumber/getdata:
    get:
      tags:
        - "DeviceInfo"
      operationId: "getSerial"
      summary: "Get Master Serial Number"
      produces: 
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"

  /deviceinfo/fieldbustype/getdata:
    get:
      tags:
        - "DeviceInfo"
      operationId: "getFieldbusType"
      summary: "Get Master Fieldbus Type"
      produces:
        - "application/json"

      responses: 
        "200":
          description: "Succesfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
      
  /deviceinfo/productcode/getdata:
    get:
      tags:
        - "DeviceInfo"
      operationId: "getProductCode"
      summary: "Get product code for Master"
      produces:
      - "application/json"

      responses:
        "200":
          description: "Ran successfully"
          schema:
            $ref: "#/definitions/GenericResponse"

  /processdatamaster/temperature/getdata:
    get: 
      tags: 
        - "Diagnostics"
      operationId: "getTemperature"
      summary: "Get Master Temperature"
      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"

  /processdatamaster/voltage/getdata:
    get: 
      tags: 
        - "Diagnostics"
      operationId: "getVoltage"
      summary: "Get Master voltage"

      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"

  /processdatamaster/current/getdata:
    get: 
      tags: 
        - "Diagnostics"
      operationId: "getCurrent"
      summary: "Get Master Current"

      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
      
  /processdatamaster/supervisionstatus/getdata:
    get: 
      tags: 
        - "Diagnostics"
      summary: "Get supervision status"
      operationId: "getSupervised"
      
      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
            
  /iotsetup/network/ipaddress/getdata:
    get:
      tags:
      - "IOT"
      summary: "Get IP address of IOT port"
      description: ""
      operationId: "getIoTIP"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      
      responses:
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

        "405":
          description: "Invalid input"
          
  /iotsetup/network/dhcp/getdata:
    get:
      tags: 
        - "IOT"
      summary: "Get IoT DHCP data"
      operationId: "getIoTDHCP"
      produces:
      - "application/json"
      responses: 
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

  /iolinkmaster/port[{port}]/iolinkdevice/vendorid/getdata:
    get:
      tags:
        - "Ports"
      summary: "Get product application tag on port x"
      operationId: "getPortVendorId"
      parameters: 
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup
      responses:
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

  /iolinkmaster/port[{port}]/iolinkdevice/deviceid/getdata:
    get:
      tags:
        - "Ports"
      summary: "Get device id on port x"
      operationId: "getPortDeviceId"
      parameters: 
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup
      responses:
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

  /iolinkmaster/port[{port}]/iolinkdevice/applicationspecifictag/getdata:
    get:
      tags:
        - "Ports"
      summary: "Get product application tag on port x"
      operationId: "getPortTag"
      parameters: 
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup
      responses:
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

  /iolinkmaster/port[{port}]/iolinkdevice/serial/getdata:
    get:
      tags:
        - "Ports"
      summary: "Get product serial on port x"
      operationId: "getPortSerial"
      parameters: 
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup
      responses:
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

  /iolinkmaster/port[{port}]/iolinkdevice/productname/getdata:
    get:
      tags: 
        - "Ports"
      summary: "Get product name on port x"
      operationId: "getPortProduct"
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for
      
      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
          
  /iolinkmaster/port[{port}]/iolinkdevice/status/getdata:
    get:
      tags: 
        - "Ports"
      summary: "Get status for port"
      operationId: "getPortStatus"
      
      produces:
      - "application/json"

      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for
      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
      
  /iolinkmaster/port[{port}]/iolinkdevice/iolinkevent/datachanged/getsubscriptioninfo:
    get:
      tags: 
        - "Ports"
      summary: "Get port subscription info"
      operationId: getPortSubscriptionInfo
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for

      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
  
  /iolinkmaster/port[{port}]/iolinkdevice/iolinkevent/datachanged/unsubscribe:
    post:
      tags: 
        - "Ports"
      summary: "Unsubscribe from port events"
      operationId: unsubscribeFromPort
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index
        - in: body
          name: data
          schema: 
            properties:
              adr:
                type: string
                required: true
              cid: 
                type: integer
                default: -1
                required: true
              code:
                type: string
                default: request
                required: true
              data: 
                type: object
                properties: 
                  callback:
                      description: |-
                        The URL that will be called when data changes
                      type: string
      produces:
        - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
            
  /iolinkmaster/port[{port}]/iolinkdevice/iolinkevent/datachanged/subscribe:
    post:
      tags: 
        - "Ports"
      summary: "Subscribe to port info events"
      operationId: subcribeToPort
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for
        - in: body
          name: data
          schema:
            properties:
              adr:
                type: string
                required: true
              cid: 
                type: integer
                default: -1
                required: true
              code:
                type: string
                default: request
                required: true
              data: 
                type: object
                properties: 
                  callback:
                      description: |-
                        The URL that will be called when data changes
                      type: string
                  datatosend: 
                      description: |-
                          The Datapoint to monitor
                      type: array
      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
  
  /iolinkmaster/port[{port}]/iolinkdevice/pdout/setdata:
    post:
      tags:
        - "Ports"
      summary: "Set data on port"
      operationId: setPortData
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to set data for
        - in: body
          name: data
          schema:
            properties:
              adr:
                type: string
                required: true
              cid: 
                type: integer
                default: -1
                required: true
              code:
                type: string
                default: request
                required: true
              data: 
                type: object
                properties: 
                  newvalue:
                      description: |-
                        New value to set
                      type: string
      produces:
      - "application/json"
    
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/GenericResponse"
  
  /iolinkmaster/port[{port}]/iolinkdevice/pdin/getdata:
    get:
      tags: 
        - "Ports"
      summary: "Get data on port"
      operationId: getPortData
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for

      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
  
  /iolinkmaster/port[{port}]/iolinkdevice/iolwriteacyclic:
    get:
      tags: 
        - "Ports"
      summary: "Update device setting"
      operationId: updatePortSetting
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for
      produces:
      - "application/json"

  
      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
            
  /iolinkmaster/port[{port}]/iolinkdevice/iolreadacyclic:
    get:
      tags: 
        - "Ports"
      summary: "Get device setting"
      operationId: getPortSetting
      parameters:
        - in: path
          name: port
          type: integer
          required: true
          description: Port index to lookup data for

      produces:
      - "application/json"

      responses:
        "200":
          description: "Successfully ran"
          schema:
            $ref: "#/definitions/GenericResponse"
                 
  /fieldbussetup/network/ipaddress/getdata:
    get:
      tags:
        - "FieldBus"
      summary: "Get FieldBus IP Address"
      operationId: "getFieldBusIP"
      produces:
      - "application/json"
      responses: 
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

      
  /fieldbussetup/network/setblock:
    post:
      tags: 
        - "FieldBus"
      summary: "Assign FieldBus IP Settings"
      operationId: "setFieldBusIP"
      produces:
      - "application/json"
      parameters:
        - in: body
          name: data
          schema: 
            properties:
              adr:
                type: string
                required: true
              cid: 
                type: integer
                default: -1
                required: true
              code:
                type: string
                default: request
                required: true
              data: 
                type: object
                properties: 
                  datatoset:
                    type: object
                    properties:
                      ipaddress: 
                        type: string
                      ipdefaultgateway:
                        type: string
                        default: 0.0.0.0
                      dhcp: 
                        type: number
                        default: 0
                      subnetmask:
                        type: string
                        default: 255.255.255.0
      responses:
        "200":
          description: "Succesfully executed"
          schema: 
            $ref: "#/definitions/GenericResponse"

  /fieldbussetup/network/dhcp/getdata:
    get:
      tags:
        - "FieldBus"
      summary: "Get FieldBus DHCP Address"
      operationId: "getFieldBusDHCP"
      produces: 
      - "application/json"
      responses: 
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

      
  /fieldbussetup/hostname/getdata:
    get:
      tags:
        - "FieldBus"
      summary: "Get FieldBus Hostname"
      operationId: "getFieldBusHostname"
      produces: 
      - "application/json"
      responses: 
        "200":
          description: "Succesfully executed"
          schema:
            $ref: "#/definitions/GenericResponse"

      
   
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
 
          
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
definitions:
  TreeFormat:
    type: "object"
    properties:
      type: 
        type: "string"
      namespace:
        type: "string"
      encoding:
        type: "string"
        nullable: true
      valuation: 
        nullable: true

  TreeProfile:
    type: "array"
    items:
      type: "string"

  TreeItem:
    type: "object"
    properties:
      identifier:
        type: "string"
      type: 
        type: "string"
        enum:
        - "structure"
        - "data"
        - "service"
      subs:
        type: "array"
        items:
          $ref: "#/definitions/TreeItem"
        nullable: true
      format:
        $ref: "#/definitions/TreeFormat"
        nullable: true
      profiles:
        $ref: "#/definitionms/TreeProfile"
        nullable: true
      
  TreeResponse:
    type: "object"
    properties:
      cid: 
        type: "integer"
      data: 
        type: "object"
        properties:
          identifier: 
            type: "string"
            pattern: '^.{2}-.{2}-.{2}-.{2}-.{2}-.{2}$' 
          type:
            type: "string"
          subs:
            type: "array"
            items:
              $ref: "#/definitions/TreeItem"

  GenericResponse:
    type: "object"
    properties:
      cid: 
        type: "integer"
        format: "int64"
      data: 
        type: "object"
        properties:
          value:
            anyOf:
              - type: string
              - type: number
              - type: integer
              - type: boolean
              - type: array
                items: {}
              - type: object
            description: "Response value"
      code: 
        type: "integer"
        format: "int64"
        
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

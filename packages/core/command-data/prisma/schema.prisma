// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Device {
  id String @id
  name String

  online Boolean?

  network_name String @unique

  provisionCode String? @unique
  provisioned Boolean?

  maintenanceWindows MaintenanceWindow[] @relation(name: "hasMaintenanceWindow")
  
  dataLayout Json?

  deviceMapping DeviceMapping[] @relation(name: "hasDeviceMapping")

  alarms Alarm[] @relation(name: "hasAlarmed")

  activeProgram Program? @relation(name: "useProgram", fields: [program], references: [id])
  
  screens DeviceScreen[] @relation(name: "hasScreen")
  // values DeviceValue[] @relation(name: "hasSnapshots")

  program String?

  reports ReportPage[] @relation(name: "hasReportPages")

  createdAt DateTime @default(now())
  
  lastSeen DateTime?

  organisation String
}

model DeviceMapping {
  id String @id
  path String


  deviceState IOTemplateState @relation(name: "mapsDeviceState", references: [id], fields: [deviceStateId])
  deviceStateId String

  owner Device @relation(name: "hasDeviceMapping", fields: [ownerId], references: [id])
  ownerId String
}

model DeviceScreen {
  id String @id
  name String

  device Device @relation(name: "hasScreen", fields: [deviceId], references: [id])
  deviceId String

  createdAt DateTime @default(now())

  provisioned Boolean

  provisionCode String
}

model Alarm {
  id String @id

  message String
  cause String

  seen Boolean

  createdAt DateTime @default(now())

  device Device @relation(name: "hasAlarmed", fields: [deviceId], references: [id])
  deviceId String
}

model MaintenanceWindow {
  id String @id

  startTime DateTime
  endTime DateTime

  owner String

  device Device @relation(name: "hasMaintenanceWindow", fields: [deviceId], references: [id])
  deviceId String
}

model ReportPage {
  id String @id

  name String

  charts DeviceReport[] @relation(name: "hasReports")

  createdAt DateTime? @default(now())

  owner String

  device Device @relation(name: "hasReportPages", fields: [deviceId], references: [id])
  deviceId String
}


model DeviceValue {
  id Int @default(autoincrement())

  placeholder String
  key String?
  value String

  lastUpdated DateTime @default(now())

  // device Device @relation(name: "hasSnapshots", fields: [deviceId], references: [id])
  deviceId String 

  @@id([id, lastUpdated])
  @@unique([deviceId, placeholder, key, lastUpdated])
}


model DeviceValueChange {
  id Int @default(autoincrement())

  placeholder String
  key String?
  value String

  userId String

  lastUpdated DateTime @default(now())

  deviceId String

  @@id([id, lastUpdated])
  @@unique([deviceId, placeholder, key, userId, lastUpdated])
  
}

model DeviceReport {
  id String @id

  type String

  x Float
  y Float
  width Float
  height Float

  total Boolean

  tag ProgramTag? @relation(name: "reportsOnTag", fields: [tagId], references: [id])
  tagId String?

  subkey ProgramTypeField? @relation(name: "reportsOnTagField", fields: [subkeyId], references: [id])
  subkeyId String?

  unit String?

  timeBucket String?

  page ReportPage @relation(name: "hasReports", fields: [pageId], references: [id])
  pageId String
}


//TODO allow IOTemplate to be added by user/org
model IOTemplate {
  id String @id
  name String

  type String?

  tagPrefix String?

  state IOTemplateState[] @relation(name: "hasState")
  actions IOTemplateAction[] @relation(name: "hasAction")

  // config IOTemplateConfig[] @relation(name: "hasIOConfig")
  // program Program? @relation(name: "hasTemplates", fields: [programId], references: [id])
  // programId String?

  createdAt DateTime @default(now())
  
}

// model IOTemplateConfig {
//   id String @id
//   key String
//   type String

//   device IOTemplate @relation(name: "hasIOConfig", references: [id], fields: [deviceId], onDelete: Cascade)
//   deviceId String
// }

model IOTemplateAction {
  id String @id 
  key String

  func String?

  device IOTemplate @relation(name: "hasAction", references: [id], fields: [deviceId], onDelete: Cascade)
  deviceId String
}

model IOTemplateState {
  id String @id 
  
  key String
  type String
            
  inputUnits String?
  units String?
  writable Boolean

  min String?
  max String?
  
  mappedBy DeviceMapping[] @relation(name: "mapsDeviceState")

  device IOTemplate @relation(name: "hasState", references: [id], fields: [deviceId], onDelete: Cascade)
  deviceId String
}

model ElectricalSchematic {
  id String @id

  name String

  // devices ElectricalDevice[]

  pages ElectricalSchematicPage[] @relation(name: "hasPages")

  organisation String
}

model ElectricalSchematicPage {
  id String @id

  name String

  nodes Json?
  edges Json?

  rank String?

  schematic ElectricalSchematic @relation(name: "hasPages", fields: [schematicId], references: [id])
  schematicId String
}

model Program {
  id String @id

  name String

  dataScopes ProgramDataScope[] @relation(name: "hasDataScopes")
  templatePacks CanvasNodeTemplatePack[] @relation(name: "useTemplatePack")

  components ProgramComponent[] @relation(name: "hasProgramComponents")
  
  interface ProgramHMI[] @relation(name: "hasInterface")

  localHomepage ProgramHMI? @relation(name: "localHomepage", fields: [localHomepageId], references: [id])
  localHomepageId String? 
  remoteHomepage ProgramHMI? @relation(name: "remoteHomepage", fields: [remoteHomepageId], references: [id])
  remoteHomepageId String?

  templates CanvasDataTemplate[] @relation(name: "hasTemplates")

  tags ProgramTag[] @relation(name: "hasTags")

  types ProgramType[] @relation(name: "hasTypes")

  alarms ProgramAlarm[] @relation(name: "useAlarm")


  usedBy Device[] @relation(name: "useProgram")


  createdAt DateTime @default(now())

  organisation String
}

model ProgramComponent {
  id String @id
  name String
  description String?

  properties ProgramComponentProperty[] @relation(name: "hasProgramComponentProperty")
  files ProgramComponentFile[] @relation(name: "hasProgramComponentFile")

  main ProgramComponentFile? @relation(name: "hasMainComponentFile", references: [id], fields: [mainId])
  mainId String?

  program Program @relation(name: "hasProgramComponents", references: [id], fields: [programId])
  programId String
}

model ProgramComponentProperty {
  id String @id
  key String

  scalar String?

  type ProgramType? @relation(name: "hasProgramComponentPropertyType", fields: [typeId], references: [id])
  typeId String?

  component ProgramComponent @relation(name: "hasProgramComponentProperty", fields: [componentId], references: [id], onDelete: Cascade)
  componentId String

  @@unique([key, componentId])
}

model ProgramComponentFile {
  id String @id

  path String
  content String?

  component ProgramComponent @relation(name: "hasProgramComponentFile", fields: [componentId], references: [id], onDelete: Cascade)
  componentId String

  mainFor ProgramComponent[] @relation(name: "hasMainComponentFile")

  @@unique([componentId, path])
}

model ProgramDataScope {
  id String @id
  name String
  description String?

  plugin DataScopePlugin @relation(name: "usesDataScopePlugin", references: [id], fields: [pluginId])
  pluginId String

  configuration Json?

  createdAt DateTime @default(now())

  program Program @relation(name: "hasDataScopes", references: [id], fields: [programId])
  programId String

  usedByTag ProgramTag[] @relation(name: "tagScope")
}

model ProgramAlarm {
  id String @id
  name String

  description String?

  conditions Json?

  nodes ProgramAlarmAction[] @relation(name: "useAlarmAction")
  edges ProgramAlarmEdge[] @relation(name: "useAlarmEdge")

  program Program @relation(name: "useAlarm", fields: [programId], references: [id])
  programId String
}

model ProgramAlarmEdge {
  id String @id
  
  source ProgramAlarmAction @relation(name: "sourceAlarmAction", references: [id], fields: [sourceId])
  sourceId String

  target ProgramAlarmAction @relation(name: "targetAlarmAction", references: [id], fields: [targetId])
  targetId String

  conditions ProgramAlarmCondition[] @relation(name: "useCondition")

  alarm ProgramAlarm @relation(name: "useAlarmEdge", references: [id], fields: [alarmId])
  alarmId String
}

model ProgramAlarmCondition {
  id String @id
  name String?

  input String

  value String

  edge ProgramAlarmEdge @relation(name: "useCondition", fields: [edgeId], references: [id])
  edgeId String
}

model ProgramAlarmAction {
  id String @id
  name String?

  type ProgramAlarmActionType @relation(name: "useAlarmActionType", fields: [typeId], references: [id])
  typeId String

  sourcedBy ProgramAlarmEdge[] @relation(name: "sourceAlarmAction")
  targetedBy ProgramAlarmEdge[] @relation(name: "targetAlarmAction")

  alarm ProgramAlarm @relation(name: "useAlarmAction", fields: [alarmId], references: [id])
  alarmId String
}

model ProgramAlarmActionType {
  id String @id

  name String
  func String

  usedByAction ProgramAlarmAction[] @relation(name: "useAlarmActionType")
}

model ProgramHMI {
  id String @id

  name String? 

  nodes CanvasNode[] @relation(name: "useNode")

  edges CanvasEdge[] @relation(name: "useEdge")

  program Program @relation(name: "hasInterface", fields: [programId], references: [id])
  programId String

  localHomepage Program[] @relation(name: "localHomepage", map: "localHomepage")
  remoteHomepage Program[] @relation(name: "remoteHomepage", map: "remoteHomepage")
}


model CanvasEdge {
  id String @id

  from CanvasNode @relation(name: "fromNode", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String

  fromHandle String?
  fromPoint Json?

  to CanvasNode @relation(name: "toNode", fields: [toId], references: [id], onDelete: Cascade)
  toId String

  toHandle String?
  toPoint Json?

  points Json?

  hmi ProgramHMI @relation(name: "useEdge", fields: [hmiId], references: [id])
  hmiId String
}

model DataScopePlugin {
  id String @id

  name String
  module String

  configuration Json?

  usedBy ProgramDataScope[] @relation(name: "usesDataScopePlugin")
}

model CanvasNodeTemplatePack {
  id String @id

  name String
  type String?

  provider String?
  url String?
  
  version String?
  description String?

  public Boolean?

  icon String?

  elements CanvasNodeTemplate[] @relation(name: "inPack")

  owner String

  registeredBy String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  usedBy Program[] @relation(name: "useTemplatePack")
}

model CanvasNodeTemplate {
  id String @id

  name String

  width Float?
	height Float?

  ports Json?
  

  pack CanvasNodeTemplatePack? @relation(name: "inPack", fields: [packId], references: [id])
  packId String?
}

model CanvasNode {
  id String @id

  x Float
  y Float
  
  scaleX Float?
  scaleY Float?

  rotation Float

	width Float?
	height Float?

	zIndex Float @default(1)

	showTotalizer Boolean

	type String?

  dataTransformer CanvasDataTransformer? @relation(name: "transformsCanvasNodeData")

  options Json?

  children CanvasNode[] @relation(name: "hasNode")

  parent CanvasNode? @relation(name: "hasNode", fields: [parentId], references: [id])
  parentId String?

  inputs CanvasEdge[] @relation(name: "fromNode")
  outputs CanvasEdge[] @relation(name: "toNode")

  ports CanvasPort[] @relation(name: "hasPort")

  hmi ProgramHMI? @relation(name: "useNode", fields: [hmiId], references: [id])
  hmiId String?
}

model CanvasDataTransformer {
  id String @id
  
  node CanvasNode @relation(name: "transformsCanvasNodeData", fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId String @unique

  template CanvasDataTemplate @relation(name: "transformsCanvasData", fields: [templateId], references: [id])
  templateId String

  configuration CanvasDataTransformerConfiguration[]  @relation(name: "configuresTransformer")
  
}

model CanvasDataTransformerConfiguration {
  id String @id

  field CanvasDataTemplateIO @relation(name: "configuresTransformerIO", fields: [fieldId], references: [id])
  fieldId String

  transformer CanvasDataTransformer @relation(name: "configuresTransformer", fields: [transformerId], references: [id], onDelete: Cascade)
  transformerId String

  @@unique([fieldId, transformerId])

  value String?
}

model CanvasDataTemplate {
  id String @id

  name String

  inputs CanvasDataTemplateIO[] @relation(name: "inputForTransformer")
  outputs CanvasDataTemplateIO[] @relation(name: "outputForTransformer")

  edges CanvasDataTemplateEdge[] @relation(name: "transformsAlongEdge")

  transforms CanvasDataTransformer[] @relation(name: "transformsCanvasData")

  program Program @relation(name: "hasTemplates", fields: [programId], references: [id])
  programId String
}

model CanvasDataTemplateIO {
  id String @id

  name String

  type String


  sourcedBy CanvasDataTemplateEdge[] @relation(name: "fromDataIO")
  
  //Use this as transformers
  targetedBy CanvasDataTemplateEdge[] @relation(name: "toDataIO")


  inputFor CanvasDataTemplate[] @relation(name: "inputForTransformer")
  outputFor CanvasDataTemplate[] @relation(name: "outputForTransformer")

  configuredBy CanvasDataTransformerConfiguration[] @relation(name: "configuresTransformerIO")
}

model CanvasDataTemplateEdge {
  id String @id

  //From->To relationship deals with 1:1 mapping
  from CanvasDataTemplateIO? @relation(name: "fromDataIO", fields: [fromId], references: [id])
  fromId String?


  //Script->To relationship deals with data aggregation
  script String?

  to CanvasDataTemplateIO? @relation(name: "toDataIO", fields: [toId], references: [id])
  toId String?


  template CanvasDataTemplate @relation(name: "transformsAlongEdge", fields: [templateId], references: [id])
  templateId String
}

model ProgramTag {
  id String @id

  name String

  scope ProgramDataScope? @relation(name: "tagScope", references: [id], fields: [scopeId])
  scopeId String?

  type ProgramTagType? @relation(name: "tagType") //String | Valve | String[]
  // typeId String @unique

  program Program @relation(name: "hasTags", fields: [programId], references: [id])
  programId String


  reports DeviceReport[] @relation(name: "reportsOnTag")

  @@unique([name, programId])
}

model ProgramTagType {
  id String @id

  scalar String?

  type ProgramType? @relation(name: "tagUsesType", fields: [typeId], references: [id])
  typeId String?

  tag ProgramTag @relation(name: "tagType", fields: [tagId], references: [id], onDelete: Cascade) //, onDelete: Cascade)
  tagId String @unique

}

model ProgramType {
  id String @id

  name String
  
  fields ProgramTypeField[] @relation(name: "hasTypeField")

  program Program @relation(name: "hasTypes", fields: [programId], references: [id])
  programId String

  usedByTagType ProgramTagType[] @relation(name: "tagUsesType")
  usedByType ProgramTypeField[] @relation(name: "typeUsesType")
  usedByComponentProperty ProgramComponentProperty[] @relation(name: "hasProgramComponentPropertyType")

  @@unique([name, programId])
}

model ProgramTypeField {
  id String @id

  name String

  scalar String?
  
  type ProgramType? @relation(name: "typeUsesType", fields: [typeId], references: [id])
  typeId String?


  parent ProgramType @relation(name: "hasTypeField", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String

  reports DeviceReport[] @relation(name: "reportsOnTagField")

  @@unique([name, parentId])
}

model CanvasPort {
		id String @id
		key String
		
    x Float
		y Float

		length Float
		rotation Float

    node CanvasNode @relation(name: "hasPort", fields: [nodeId], references: [id], onDelete: Cascade)
    nodeId String
}
